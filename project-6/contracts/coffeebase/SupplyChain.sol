pragma solidity >=0.4.24;


import "../../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol";

// Import the library 'Roles'
import "../access-control/FarmerRole.sol";
import "../access-control/DistributorRole.sol";
import "../access-control/RetailerRole.sol";
import "../access-control/ConsumerRole.sol";


// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define enum 'State' with the following values:
    enum State
    {
        Harvested,  // 0
        Processed,  // 1
        Packed,     // 2
        ForSale,    // 3
        Sold,       // 4
        Shipped,    // 5
        Received,   // 6
        Purchased   // 7
    }

    struct Item {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        string  originFarmName; // Farmer Name
        string  originFarmInformation;  // Farmer Information
        string  originFarmLatitude; // Farm Latitude
        string  originFarmLongitude;  // Farm Longitude
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   itemState;  // Product State as represented in the enum above
        address payable ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping from UPC to Items
  mapping (uint => uint[]) upcToItems;

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller(address _address) {
    require(msg.sender == _address, "Are you joking?");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "I can not accept less than it worth");
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _sku) {
    _;
    uint _price = items[_sku].productPrice;
    uint amountToReturn = msg.value - _price;
    msg.sender.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _sku) {
    require(items[_sku].itemState == State.Harvested, "Not in harvest");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _sku) {
    require(items[_sku].itemState == State.Processed, "Not in process");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _sku) {
    require(items[_sku].itemState == State.Packed, "Not in package");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _sku) {
    require(items[_sku].itemState == State.ForSale, "Not for sale");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _sku) {
    require(items[_sku].itemState == State.Sold, "Not sold yet");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _sku) {
    require(items[_sku].itemState == State.Shipped, "Not shipped yet");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _sku) {
    require(items[_sku].itemState == State.Received, "Still not received");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _sku) {
    require(items[_sku].itemState == State.Purchased, "Not purchased");
    _;
  }

  // and set 'sku' to 1
  constructor() public payable {
    sku = 1;
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes)
    public
    onlyFarmer()
    verifyCaller(_originFarmerID)
  {
    Item memory item;

    item.ownerID = msg.sender;
    item.originFarmerID = msg.sender; // Metamask-Ethereum address of the Farmer
    item.sku = sku;   // Stock Keeping Unit (SKU)
    item.upc = _upc; // Universal Product Code (UPC); generated by the Farmer; goes on the package; can be verified by the Consumer
    item.originFarmName = _originFarmName; // Farmer Name
    item.originFarmInformation = _originFarmInformation;  // Farmer Information
    item.originFarmLatitude = _originFarmLatitude; // Farm Latitude
    item.originFarmLongitude = _originFarmLongitude;  // Farm Longitude
    item.productNotes = _productNotes; // Product Notes
    item.productID = _upc + sku * 100000000000;  // Product ID potentially a combination of upc + sku
    item.itemState = defaultState;  // Product State as represented in the enum above

    items[sku] = item;
    upcToItems[_upc].push(sku);

    sku = sku + 1;

    emit Harvested(item.sku);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _sku) public
    harvested(_sku)
    verifyCaller(items[_sku].originFarmerID)
  {
    items[_sku].itemState = State.Processed;

    emit Processed(_sku);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _sku) public
    processed(_sku)
    verifyCaller(items[_sku].originFarmerID)
  {
    items[_sku].itemState = State.Packed;

    emit Packed(_sku);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _sku, uint _price) public
    packed(_sku)
    verifyCaller(items[_sku].originFarmerID)
  {
    items[_sku].itemState = State.ForSale;
    items[_sku].productPrice = _price;

    emit ForSale(_sku);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _sku) public payable
    onlyDistributor()
    forSale(_sku)
  {
    _buyItem(_sku);

    items[_sku].itemState = State.Sold;
    items[_sku].distributorID = msg.sender;

    emit Sold(_sku);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _sku) public
    sold(_sku)
    verifyCaller(items[_sku].distributorID)
  {
    items[_sku].itemState = State.Shipped;

    emit Shipped(_sku);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _sku) public payable
    onlyRetailer()
    shipped(_sku)
  {
    _buyItem(_sku);

    items[_sku].itemState = State.Received;
    items[_sku].retailerID = msg.sender;

    emit Received(_sku);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _sku) public payable
    onlyConsumer()
    received(_sku)
  {
    _buyItem(_sku);

    items[_sku].itemState = State.Purchased;
    items[_sku].consumerID = msg.sender;

    emit Purchased(_sku);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _sku) public view returns
    (
      uint          itemSKU,
      uint          itemUPC,
      address       ownerID,
      address       originFarmerID,
      string memory originFarmName,
      string memory originFarmInformation,
      string memory originFarmLatitude,
      string memory originFarmLongitude
    )
  {
    itemSKU = items[_sku].sku;
    itemUPC = items[_sku].upc;
    ownerID = items[_sku].ownerID;
    originFarmerID = items[_sku].originFarmerID;
    originFarmName = items[_sku].originFarmName;
    originFarmInformation = items[_sku].originFarmInformation;
    originFarmLatitude = items[_sku].originFarmLatitude;
    originFarmLongitude = items[_sku].originFarmLongitude;
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _sku) public view returns
    (
      uint          itemSKU,
      uint          itemUPC,
      uint          productID,
      string memory productNotes,
      uint          productPrice,
      uint          itemState,
      address       distributorID,
      address       retailerID,
      address       consumerID
    )
  {
    itemSKU = items[_sku].sku;
    itemUPC = items[_sku].sku;
    productID = items[_sku].productID;
    productNotes = items[_sku].productNotes;
    productPrice = items[_sku].productPrice;
    itemState = uint(items[_sku].itemState);
    distributorID = items[_sku].distributorID;
    retailerID = items[_sku].retailerID;
    consumerID = items[_sku].consumerID;
  }

  function getSKUs(uint udc) public view returns(uint[] memory) {
    return upcToItems[udc];
  }

  //Responsable to pay and give back refund
  function _buyItem(uint _sku) internal
      paidEnough(items[_sku].productPrice)
      checkValue(_sku)
  {
      // Transfer money to farmer
      items[_sku].ownerID.transfer(msg.value);
      items[_sku].ownerID = msg.sender;
  }
}
